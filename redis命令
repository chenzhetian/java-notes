redis支持的数据结构：
string、hash、list、set、sorted set

key(键)
del	删除key
dump	序列化给定key
restore	反序列化(RESTORE key ttl serialized-value)参数 ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间。
exists	是否存在某个key
expire	给指定key设置生存时间(秒) expire key seconds
pexpire	给指定key设置生存时间(毫秒) expire key milliseconds
expireat	设置生存空间(秒时间戳)	expireat key seconds-timestamp
pexpireat	设置生存空间(毫秒时间戳)
ttl	查看剩余生存时间(秒)
pttl	查看剩余生存时间(毫秒)
keys	查找所有符合给定模式的key(keys *aab*/t??/t[abc]*)
migrate	当前实例传送到目标实例的指定数据库上，一旦传送成功， key 保证会出现在目标实例上，而当前实例上的 key 会被删除。
		两个redis实例相互迁移
		(MIGRATE host port key destination-db timeout [COPY] [REPLACE]  例：MIGRATE 
move	将当前数据库的key移动到给定的数据库db中
object	命令允许从内部查看给定key的redis对象
		REFCOUNT(存储值的次数) 和 IDLETIME(空转时间，idle没有被读取也没有被写入，以秒为单位) 返回数字。
		ENCODING 返回相应的编码类型。
persist	移除给定key的生存空间(persist key)
randomkey	从当前数据库返回随机一个key
rename	将key改名为newkey，存在时也可以，会直接覆盖(RENAME key newkey)
RENAMENX	当且仅当 newkey 不存在时，将 key 改名为 newkey 。
sort	返回或保存给定列表、集合、有序集合 key 中经过排序的元素。
		(SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination])
type	返回key存储的值的类型(type key)
scan	暂时没理解(SCAN cursor [MATCH pattern] [COUNT count])

string(字符串)
append	存在加在后面，不存在相当于set(append key value)
getrange	返回 key 中字符串值的子字符串，字符串的截取范围由 start ~ end 两个偏移量决定(GETRANGE key start end)
bitcount	计算给定字符串中，被设置为1的比特位的数量。可以用来实现用户上限次数统计，占用空间小
getbit	对 key 所储存的字符串值，获取指定偏移量上的位(bit)。(GETBIT key offset)
setbit	对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。(SETBIT key offset value)
bitop	对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。bitop之前事先进行setbit
		4个运算符：
		BITOP AND destkey key [key ...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。
		BITOP OR destkey key [key ...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。
		BITOP XOR destkey key [key ...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。
		BITOP NOT destkey key ，对给定 key 求逻辑非，并将结果保存到 destkey 。
decr	将key中存储的数字值减一	，不是数字就会报错	
decrby	将key存储的值减去减量decrement(DECRBY key decrement)
incr	将key中存储的数字值加一	，不是数字就会报错			
incrby	将key存储的值加上增量increment(INCRBY key increment)
incrbyfloat	加上浮点数增量
getset	将给定key的值设为value，并返回key的旧值(getset key value)
get	只能处理字符串值，并且key只有一个
mget	可以返回一个或多个给定的key值(MGET key [key ...])
mset	同时设置一个或多个key-value对，会覆盖原值(MSET key value [key value ...])
msetnx	同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。与mset相对
setex	将值value关联到key，并将key的生存时间设为seconds，比expire多了一步赋值(SETEX key seconds value)
setnx	将 key 的值设为 value ，当且仅当 key 不存在。 key 已经存在，则 SETNX 不做任何动作。(SETNX key value)
psetex	与setex相似，生存时间为毫秒
set	将value关联到key上(SET key value [EX seconds] [PX milliseconds] [NX|XX])
setrange	替换字符串,从偏移量 offset 开始,原字符和偏移量之间的空白将用零字节(zerobytes, "\x00" )来填充。(SETRANGE key offset value)
strlen	返回key的字符串长度,当 key 不存在时，返回 0 。不是字符串值时，返回一个错误(STRLEN key)

Hash(哈希表)
hdel	删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。(HDEL key field [field ...])
hexists	查看哈希表 key 中，给定域 field 是否存在。(HEXISTS key field)
hget	获取key的域field的值，域或key不存在，返回nil。(HGET key field)
hgetall	获取key的所有域和值，返回值的长度为哈希表大小的两倍，一行域，一行值(HGETALL key)
hincrby	field值加上增量(HINCRBY key field increment)
hincrbyfloat	加上浮点数增量(HINCRBYFLOAT key field increment)
hkeys	返回哈希表 key 中的所有域。(HKEYS key)
hvals	返回哈希表 key 中所有域的值。不存在返回空表。(HVALS key)
hlen	返回key中域的数量(HLEN key)
hset	只能设置一个域的value(HSET key field value)
hmget	获取多个域的值,域不存在，那一行返回nil(HMGET key field [field ...])
hmset	设置多个域的值(HMSET key field value [field value ...])
hsetnx	域不存在时可设置，存在该操作无效(HSETNX key field value)

List(列表)与上面两个有所不同了
lpush	将一个或多个值 value 插入到列表 key 的表头,从左到右(LPUSH key value [value ...])
lpushx	从左插入，当key不存在，则不添加(LPUSHX key value)
rpush	将一个或多个值 value 插入到列表 key 的表尾(最右边)(RPUSH key value [value ...])
rpushx	从右插入，当key不存在，则不添加(RPUSHX key value)
llen	返回key列表的长度(LLEN key)
lpop	移除并返回列表key的头元素(LPOP key)
rpop	移除并返回列表 key 的尾元素。(RPOP key)
blpop	弹出(弹出之后列表中的值就不存在了)存在值的列表，没列表一直被阻塞(BLPOP key [key ...] timeout
		如果所有给定 key 都不存在或包含空列表，那么 BLPOP 命令将阻塞连接，直到等待超时，或有另一个客户端对给定 key 的任意一个执行 LPUSH 或 RPUSH 命令为止。
		超时参数 timeout 接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely) 。
		取最左边的
brpop	与blpop取的列表中元素的位置不同，r取最右边的
brpoplpush	当给定列表 source 不为空时，当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。 BRPOPLPUSH 的表现和 RPOPLPUSH 一样。(BRPOPLPUSH source destination timeout)
rppoplpush	上同
lindex	从key中获取下标为index的元素，0为第一个，-1为最后一个，找不到返回nil(LINDEX key index)
linsert	将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。key不存在返回0，没找到pivot返回-1，key不是列表类型报错(LINSERT key BEFORE|AFTER pivot value)
lrange	获取列表key指定区域的元素，区间以偏移量 start 和 stop 指定，从0开始，-1表示最后一个，-2倒数第二个(LRANGE key start stop)
lrem	根据count值，移除列表中与参数value相等的元素，count小于0，从表尾开始；等于0，删除所有与value相等的值；大于0，从表头开始(LREM key count value)
lset	将列表key下标为index的元素的值设置为value，修改(lset key index value)
ltrim	保留列表key第strat个到第stop个的元素，其他剔除，start=10000,stop=999会清空列表(ltrim key start stop)


Set(集合)
sadd	将一个或多个member元素加入到集合key当中，已经存在于集合(重复)的member元素将被忽略(sadd key member[member...])
scard	返回集合中元素的个数(scard key)
sdiff	通过这个获取集合key下的所有元素，也可以获取与其他key不同的元素,即差集(sdiff key[key...])

事务
watch	WATCH key [key ...] 监视一个或多个key，如果被其他命令所改动，那么事务中断
